parameters:
  - name: terraform_action
    default: 'apply'
  - name: root_module_folder_relative_path
    default: '.'
  - name: variable_group
    type: string
    default: 'vars-group-workspace'

stages:
  - stage: plan
    displayName: Plan
    variables:
      - name: 'vars-group-workspace'
        value: 'false'
      - group: ${{ parameters.variable_group }}
    jobs:
      - job: plan
        displayName: Plan with Terraform
        pool:
          vmImage: ubuntu-latest
        timeoutInMinutes: 0
        steps:
          - checkout: self
            displayName: Checkout Terraform Module
          - template: helpers/terraform-installer.yaml
            parameters:
              terraformVersion: 'latest'
          - template: helpers/terraform-init.yaml
            parameters:
              serviceConnection: 'fabric-service-connection'

              backendAzureResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
              backendAzureStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
              backendAzureStorageAccountContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
              root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
          - template: helpers/terraform-plan.yaml
            parameters:
              terraform_action: ${{ parameters.terraform_action }}
              serviceConnection: 'fabric-service-connection'

              root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
          - task: CopyFiles@2
            displayName: Create Module Artifact
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                **/*
                !.terraform/**/*
                !.git/**/*
                !.pipelines/**/*
                !**/.terraform/**/*
                !**/.git/**/*
                !**/.pipelines/**/*
              TargetFolder: '$(Build.ArtifactsStagingDirectory)'
              CleanTargetFolder: true
              OverWrite: true
          - task: PublishPipelineArtifact@1
            displayName: Publish Module Artifact
            inputs:
              targetPath: '$(Build.ArtifactsStagingDirectory)'
              artifact: 'module'
              publishLocation: 'pipeline'
          - pwsh: |
              terraform `
              -chdir="${{ parameters.root_module_folder_relative_path }}" `
              show `
              tfplan
            displayName: Show the Plan for Review

  - stage: apply
    displayName: Apply
    dependsOn: plan
    variables:
      - name: 'selfHostedAgent'
        value: 'false'
      - group: ${{ parameters.variable_group }}
    jobs:
      - job: apply
        displayName: Apply with Terraform
        pool:
          vmImage: ubuntu-latest
        timeoutInMinutes: 0
        steps:
          - download: none
          - task: DownloadPipelineArtifact@2
            displayName: Download Module Artifact
            inputs:
              buildType: 'current'
              artifactName: 'module'
              targetPath: '$(Build.SourcesDirectory)'
          - template: helpers/terraform-installer.yaml
            parameters:
              terraformVersion: 'latest'
          - template: helpers/terraform-init.yaml
            parameters:
              serviceConnection: 'fabric-service-connection'

              backendAzureResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
              backendAzureStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
              backendAzureStorageAccountContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
              root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
          - template: helpers/terraform-apply.yaml
            parameters:
              terraform_action: ${{ parameters.terraform_action }}
              serviceConnection: 'fabric-service-connection'

              root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}


